FUNC void Status(void) {
  printf ("PC = %08X, SP = %08X, DUALCORE = %d, CORE = %d\n", PC, SP, (_RDWORD(0x40001100)>>9)&1, _RDWORD(0xE00FE000));	
//  printf ("ACTLR = %08X, CPUID = %08X, ICSR = %08X, VTOR = %08X\n", _RDWORD(0xE000E008), _RDWORD(0xE000ED00), _RDWORD(0xE000ED04), _RDWORD(0xE000ED08)); 
//  printf ("AIRCR = %08X, SCR   = %08X, CCR  = %08X, SHPR1= %08X\n", _RDWORD(0xE000ED0C), _RDWORD(0xE000ED10), _RDWORD(0xE000ED14), _RDWORD(0xE000ED18)); 
//  printf ("SHPR2 = %08X, SHPR3 = %08X, SHCRS= %08X, CFSR = %08X\n", _RDWORD(0xE000ED1C), _RDWORD(0xE000ED20), _RDWORD(0xE000ED24), _RDWORD(0xE000ED28)); 
//  printf ("HFSR  = %08X, MMAR  = %08X, BFAR = %08X, AFSR = %08X\n", _RDWORD(0xE000ED2C), _RDWORD(0xE000ED34), _RDWORD(0xE000ED38), _RDWORD(0xE000ED3C)); 
}

FUNC void Setup(unsigned int region) {
  region &= 0xFFFFF000;
  SP = _RDWORD(region);                          // Setup Stack Pointer
  PC = _RDWORD(region + 4);                          // Setup Program Counter
  _WDWORD(0xE000ED08, region);                   // Setup Vector Table Offset Register
	Status();
}

/*-------------------------------------------*/
/* Executes upon software RESET;             */
/*  (Use the function name as is)            */
/*-------------------------------------------*/
FUNC void OnResetExec(void)  {       
  Setup(0x02000000); 
}

FUNC void LockStep(unsigned int EN) {
  _WDWORD(0x400010F0, 0x8555AAA1); 
  _WDWORD(0x40001100, (_RDWORD(0x40001100) & ~(1<<9))| (!EN<<9));
  _WDWORD(0x40001110, (_RDWORD(0x40001110) & ~(1<<9))| (!EN<<9));
  _WDWORD(0x40001120, (_RDWORD(0x40001120) & ~(1<<9))| (!EN<<9));
}

DEFINE BUTTON "Jump BOOT", "Setup(0x00000000)"
DEFINE BUTTON "Jump ROM ", "Setup(0x01000000)"
DEFINE BUTTON "Jump RAMC", "Setup(0x02000000)"
DEFINE BUTTON "Jump RAMD", "Setup(0x20000000)"
DEFINE BUTTON "LOCKSTEP", "LockStep(1)"
DEFINE BUTTON "DUALCORE", "LockStep(0)"
DEFINE BUTTON "Status", "Status()"
DEFINE BUTTON "SysReset", "_WDWORD(0xE000ED0C, 0x05FA0004);"

load %L incremental
Setup(0x02000000); // Get ready to execute image in SRAM or whatever region it is in
g,main
